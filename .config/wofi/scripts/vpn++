# Function to get a list of WireGuard connections
get_connections() {
    local type="$1"
    local connections

    if [[ "$type" == "active" ]]; then
        connections=$(wg show interfaces | awk '/^interface/ {print $2}')
    elif [[ "$type" == "available" ]]; then
        connections=$(wg show all | awk '/^interface/ {print $2}')
    fi

    echo "$connections"
}

# Function to print WireGuard connections
print_connections() {
    local type="$1"
    local connections=$(get_connections "$type")

    for conn in $connections; do
        local status=$(wg show "$conn" | awk '/^  interface:/ {print $3}')
        local ip_address=$(wg show "$conn" | awk '/^  public key:/ {print $4}')

        if [[ "$status" == "up" && -n "$ip_address" ]]; then
            notify-send -u low -a "WireGuard" "$conn: $ip_address"
        elif [[ "$status" == "down" ]]; then
            notify-send -u normal -a "WireGuard" "$conn"
        fi
    done
}

# Function to toggle the WireGuard connection status
toggle_connection() {
    local conn="$1"
    local status=$(wg show "$conn" | awk '/^  interface:/ {print $3}')

    if [[ "$status" == "up" ]]; then
        wg-quick down "$conn"
        notify-send -u normal -a "WireGuard" "Disconnected: $conn"
    elif [[ "$status" == "down" ]]; then
        wg-quick up "$conn"
        notify-send -u low -a "WireGuard" "Connected: $conn"
    else
        notify-send -u critical -a "WireGuard" "Error: Connection not found."
        exit 1
    fi
}

# Function to set up proxy for a specific WireGuard connection using wireproxy
setup_proxy() {
    local conn="$1"
    local proxy_type="$2"
    local proxy_host="$3"
    local proxy_port="$4"

    # Set up proxy for the specific WireGuard connection using wireproxy
    # The exact implementation here will depend on how wireproxy is configured and used.
    # Please consult the wireproxy documentation for proper usage.
    # Example usage:
    # wireproxy setup --connection "$conn" --type "$proxy_type" --host "$proxy_host" --port "$proxy_port"
}

# Function to disable proxy for a specific WireGuard connection using wireproxy
disable_proxy() {
    local conn="$1"

    # Disable proxy for the specific WireGuard connection using wireproxy
    # The exact implementation here will depend on how wireproxy is configured and used.
    # Please consult the wireproxy documentation for proper usage.
    # Example usage:
    # wireproxy disable --connection "$conn"
}

# Function to safely get VPN status
get_vpn_status() {
    local vpn_info=$(nmcli -t -f NAME,TYPE,DEVICE connection show --active | grep 'vpn' | awk -F ':' '{print $1}')
    echo "$vpn_info"
}

# Function to safely get VPN details
get_vpn_details() {
    local vpn_name="$1"
    local vpn_details=$(nmcli -t -f NAME,GENERAL.STATE,GENERAL.DEFAULT,GENERAL.ACTIVECONNECTIONTYPE connection show "$vpn_name")
    echo "$vpn_details"
}

# Function to safely get VPN IP addresses
get_vpn_ip_addresses() {
    local vpn_name="$1"
    local vpn_details=$(get_vpn_details "$vpn_name")
    local ipv4_address=$(echo "$vpn_details" | grep 'ipv4' | awk -F ':' '{print $2}')
    local ipv6_address=$(echo "$vpn_details" | grep 'ipv6' | awk -F ':' '{print $2}')
    echo -e "IPv4: $ipv4_address\nIPv6: $ipv6_address"
}

# Function to safely get VPN device and speed information
get_vpn_device_speed_info() {
    local device_info=$(echo "$1" | grep 'device' | awk -F ':' '{print $2}')
    local speed_info=$(speedtest)
    echo -e "Device: $device_info\nSpeed: $speed_info"
}

# Function to safely show VPN status and details using Wofi
show_vpn_status_details() {
    local vpn_name="$1"
    local vpn_status=$(get_vpn_status)
    #local icon="<span foreground='#928374'></span>"
    local icon="" # Replace this with the desired icon for VPN off
    local status="Off"
    local tooltip="VPN is currently off"

    if [[ -n "$vpn_status" ]]; then
        icon="<span foreground='#928374'></span>"
        icon="" # Replace this with the desired icon for VPN on
        status="On"
        local vpn_details=$(get_vpn_details "$vpn_name")
        local vpn_ip_info=$(get_vpn_ip_addresses "$vpn_name")
        local vpn_speed_info=$(get_vpn_device_speed_info "$vpn_details")
        tooltip="VPN: $vpn_name\n$vpn_details\n$vpn_ip_info\n$vpn_speed_info"
    else
        # Return an empty string to hide the icon
        echo ""
    fi

    echo "{\"text\": \"$icon\", \"class\": \"$status\", \"tooltip-markup\": true, \"tooltip\": \"$tooltip\"}"
}

# Function to show VPN details using Wofi
show_vpn_details() {
    local vpn_status=$(get_vpn_status)
    if [[ -n "$vpn_status" ]]; then
        local vpn_list
        vpn_list=$(nmcli -t -f NAME,TYPE connection show | grep 'vpn' | awk -F ':' '{print $1}')
        local selected_vpn=$(echo "$vpn_list" | wofi --dmenu --prompt "VPN Details" | tr -d '\n')
        if [[ -n "$selected_vpn" ]]; then
            show_vpn_status_details "$selected_vpn"
        fi
    fi
}

# Function to connect to a VPN using Wofi
connect_to_vpn() {
    local vpn_list=$(nmcli -t -f NAME,TYPE connection show | grep 'vpn' | awk -F ':' '{print $1}')
    local selected_vpn=$(echo "$vpn_list" | wofi --dmenu --prompt "Connect to VPN" | tr -d '\n')
    if [[ -n "$selected_vpn" ]]; then
        nmcli connection up "$selected_vpn"
    fi
}

# Function to disconnect from the current VPN
disconnect_from_vpn() {
    local vpn_status=$(get_vpn_status)
    if [[ -n "$vpn_status" ]]; then
        nmcli connection down "$vpn_status"
    fi
}

# Function to safely delete a VPN connection
delete_vpn_connection() {
    local vpn_list=$(nmcli -t -f NAME,TYPE connection show | grep 'vpn' | awk -F ':' '{print $1}')
    local selected_vpn=$(echo "$vpn_list" | wofi --dmenu --prompt "Delete VPN connection" | tr -d '\n')
    if [[ -n "$selected_vpn" ]]; then
        nmcli connection delete "$selected_vpn"
    fi
}
